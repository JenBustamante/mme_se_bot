# -*- coding: utf-8 -*-
import os
from flask import Flask, request
import telegram
from telegram.ext import Dispatcher, MessageHandler, Filters
from datetime import datetime

# Configuraci√≥n del bot
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
BOT_USERNAME = "@MME_SE_bot"

# Inicializaci√≥n de la app Flask y del bot de Telegram
app = Flask(__name__)
bot = telegram.Bot(token=TELEGRAM_TOKEN)

# Almacenamiento temporal del estado de cada usuario
usuarios_estado = {}

# Frases que identifican saludos y respuestas comunes
SALUDOS_INICIALES = ["hola", "buenas", "buenos d√≠as", "buenas tardes", "buenas noches"]
RESPUESTAS_SI = ["s√≠", "si", "s√≠.", "si.", "claro", "dale", "quiero", "s√≠, dale"]
RESPUESTAS_NO = ["no", "no.", "nop", "prefiero seguir sin test"]

import re
import random

def procesar_mensaje(mensaje, user_id):
    texto = mensaje.strip().lower()
    estado = usuarios_estado.get(user_id, {})

    # Inicio del flujo si detecta un saludo
    if any(s in texto for s in SALUDOS_INICIALES):
        estado = {"fase": "menu_inicio"}
        usuarios_estado[user_id] = estado
        return (
            "¬°Hola! Qu√© alegr√≠a que est√©s aqu√≠.\n\n"
            "Este espacio fue creado especialmente para acompa√±arte a afrontar situaciones dif√≠ciles de la vida y ayudarte a desarrollar habilidades sociales y emocionales que te permitan sentirte mejor, tomar decisiones con m√°s claridad y construir relaciones m√°s sanas.\n\n"
            "Quiero contarte algo importante: esto NO es terapia, ni pretende serlo, pero s√≠ vas a encontrar herramientas pr√°cticas y confiables, basadas en:\n\n"
            "‚Ä¢ *Teor√≠a Cognitivo-Conductual (TCC)*\n"
            "‚Ä¢ *Aprendizaje Social y Emocional (SEL)*\n"
            "‚Ä¢ *Buenas pr√°cticas y evidencia cient√≠fica*\n\n"
            "¬øC√≥mo quer√©s comenzar?\n1. Escribir una situaci√≥n que est√°s viviendo\n2. Quiero aprender una habilidad"
        )

    # Men√∫ principal
    if estado.get("fase") == "menu_inicio":
        if "2" in texto:
            estado["fase"] = "habilidades_guardado_para_despues"
            usuarios_estado[user_id] = estado
            return "Perfecto, esa opci√≥n est√° disponible pero la vamos a retomar m√°s adelante. Por ahora, concentr√©monos en otra parte."
        elif "1" in texto:
            estado["fase"] = "situacion_usuario"
            usuarios_estado[user_id] = estado
            return "Gracias por confiar en este espacio. Pod√©s contarme qu√© situaci√≥n est√°s viviendo o qu√© te preocupa √∫ltimamente, y vamos a ir entendi√©ndolo paso a paso."

    # Usuario cuenta una situaci√≥n personal
    if estado.get("fase") == "situacion_usuario":
        estado["situacion"] = texto
        estado["fase"] = "preguntas_emocion_1"
        usuarios_estado[user_id] = estado

        # Detecci√≥n b√°sica de emociones
        if re.search(r"ansioso|ansiedad|nervioso", texto):
            estado["emocion_detectada"] = "ansiedad"
        elif re.search(r"triste|deprimido|vac√≠o", texto):
            estado["emocion_detectada"] = "tristeza"
        elif re.search(r"frustrado|impotente|bloqueado", texto):
            estado["emocion_detectada"] = "frustraci√≥n"
        elif re.search(r"enojo|molesto|rabia|impotencia", texto):
            estado["emocion_detectada"] = "enojo"
        elif re.search(r"solo|aislado|invisible", texto):
            estado["emocion_detectada"] = "soledad"
        elif re.search(r"inseguro|no soy capaz|valgo poco", texto):
            estado["emocion_detectada"] = "inseguridad"
        elif re.search(r"estresado|sobrecargado", texto):
            estado["emocion_detectada"] = "estr√©s"
        else:
            estado["emocion_detectada"] = "indefinida"
            return "Gracias por compartir eso. Me gustar√≠a entender un poco m√°s lo que est√°s sintiendo. ¬øPod√©s contarme con m√°s detalle qu√© fue lo que te hizo sentir as√≠?"

        # Si se detect√≥ alguna emoci√≥n, pasa a la siguiente fase
        return "Gracias por compartirlo. Me gustar√≠a entender un poco mejor lo que sent√≠s. ¬øQu√© situaciones suelen disparar esa emoci√≥n en vos?"

    # Primera pregunta de profundizaci√≥n emocional
    if estado.get("fase") == "preguntas_emocion_1":
        estado["respuesta1"] = texto
        emocion = estado.get("emocion_detectada")
        estado["fase"] = "preguntas_emocion_2"
        usuarios_estado[user_id] = estado

        respuestas = {
            "ansiedad": "La ansiedad puede sentirse como un nudo en el pecho que aparece justo cuando m√°s necesitamos claridad. ¬øHas intentado alguna estrategia para calmarte en esos momentos?",
            "tristeza": "A veces, cuando estamos tristes, cuesta encontrar algo que nos alivie. ¬øQu√© hac√©s normalmente cuando te sent√≠s as√≠?",
            "frustraci√≥n": "La frustraci√≥n puede agotar nuestra energ√≠a emocional. ¬øQu√© hac√©s cuando sent√≠s que nada sale como quer√©s?",
            "enojo": "Despu√©s de una explosi√≥n de enojo, muchas veces nos queda culpa o duda. ¬øC√≥mo reaccion√°s normalmente cuando te sent√≠s as√≠?",
            "soledad": "La soledad prolongada puede hacer que incluso nuestras relaciones m√°s cercanas se sientan lejanas. ¬øHay personas con las que te gustar√≠a conectar m√°s pero no sab√©s c√≥mo?",
            "inseguridad": "La inseguridad a veces se mete silenciosamente. ¬øQu√© pensamientos aparecen cuando te sent√≠s inseguro o insegura?",
            "estr√©s": "El estr√©s nos empuja a seguir incluso cuando nuestro cuerpo nos pide una pausa. ¬øQu√© haces para aliviarlo √∫ltimamente?"
        }

        return respuestas.get(emocion, "¬øPod√©s contarme un poco m√°s sobre eso?")

    # Segunda pregunta de profundizaci√≥n emocional
    if estado.get("fase") == "preguntas_emocion_2":
        estado["respuesta2"] = texto
        emocion = estado.get("emocion_detectada")
        estado["fase"] = "emocion_confirmada"
        usuarios_estado[user_id] = estado

        return f"Por lo que me cont√°s, puede que est√©s sintiendo *{emocion}*. ¬øTe hace sentido eso? Si quer√©s, podemos trabajarla desarrollando una habilidad que te ayude. ¬øQuer√©s empezar por ah√≠? (s√≠/no)"

    return "Estoy procesando lo que me compartiste. Gracias por tu paciencia."

def handle_message(update, context):
    texto = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    respuesta = procesar_mensaje(texto, user_id)
    context.bot.send_message(chat_id=chat_id, text=respuesta, parse_mode=telegram.ParseMode.MARKDOWN)

@app.route(f"/{TELEGRAM_TOKEN}", methods=['POST'])
def webhook():
    update = telegram.Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return 'ok'

@app.route('/')
def index():
    return 'MME est√° corriendo. üéâ'

if __name__ == '__main__':
    from telegram.ext import Updater
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    PORT = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=PORT)
