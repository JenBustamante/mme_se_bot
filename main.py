import os
from flask import Flask, request
import telegram
from telegram.ext import Dispatcher, MessageHandler, Filters
import random

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
BOT_USERNAME = "@MME_SE_bot"

app = Flask(__name__)
bot = telegram.Bot(token=TELEGRAM_TOKEN)

emociones_habilidades = {
    "ansiedad": "autorregulaci√≥n",
    "tristeza": "autoconciencia",
    "enojo": "toma de decisiones responsable",
    "frustraci√≥n": "autorregulaci√≥n",
    "soledad": "conciencia social",
    "inseguridad": "confianza",
    "culpa": "toma de decisiones responsable"
}

descripcion_habilidades = {
    "autorregulaci√≥n": "la capacidad de manejar emociones intensas de forma saludable",
    "autoconciencia": "la habilidad de entender lo que sent√≠s y por qu√©",
    "toma de decisiones responsable": "la capacidad de elegir conductas seguras y √©ticas",
    "conciencia social": "la habilidad de entender a los dem√°s y actuar con empat√≠a",
    "confianza": "una valoraci√≥n s√≥lida de vos misma/o basada en tu valor, no en la aprobaci√≥n externa"
}

planes_personalizados = {
    "autorregulaci√≥n": "Vamos a trabajar con peque√±os pasos para ayudarte a manejar mejor la ansiedad. El objetivo de estos retos ser√° que logres responder con m√°s calma y claridad en los momentos dif√≠ciles, bajando la intensidad emocional y fortaleciendo tu capacidad de recuperar el control. La constancia es clave, as√≠ que aunque no sean ejercicios largos, s√≠ requieren pr√°ctica. ¬øTe parece bien si empezamos con el primer paso?",
    "autoconciencia": "Vamos a desarrollar tu capacidad de entender lo que sent√≠s, cu√°ndo lo sent√≠s y por qu√©. El objetivo es ayudarte a identificar patrones emocionales y pensamientos que puedan estar afectando tu bienestar. Esto va a ayudarte a tomar mejores decisiones desde un lugar m√°s consciente. La clave: observar sin juzgar. ¬øEmpezamos con el primer reto?",
    "toma de decisiones responsable": "Vamos a construir una forma de decidir que no est√© basada en impulsos, sino en reflexi√≥n. El objetivo ser√° ayudarte a tomar decisiones m√°s seguras, √©ticas y alineadas con lo que realmente quer√©s. Te voy a proponer ejercicios que activen tu parte m√°s anal√≠tica. ¬øTe gustar√≠a probar?",
    "conciencia social": "Trabajar la conciencia social implica ampliar tu perspectiva para entender mejor a quienes te rodean. El objetivo de estos retos ser√° fortalecer tu empat√≠a, mejorar la comunicaci√≥n y cultivar relaciones m√°s sanas. Vamos a hacerlo paso a paso, ¬øte parece bien?",
    "confianza": "Vamos a fortalecer tu confianza desde un lugar interno y estable. No desde el elogio externo, sino desde el valor que sab√©s que ten√©s. Estos ejercicios van a ayudarte a reconocer tu capacidad y tu historia. La pr√°ctica sostenida hace toda la diferencia. ¬øVamos con el primero?"
}

retos_narrativos = {
    "autorregulaci√≥n": [
        "Hoy vamos a enfocarnos en una t√©cnica de respiraci√≥n consciente. La respiraci√≥n diafragm√°tica es una herramienta poderosa para ayudar a tu cuerpo a salir del estado de alerta cuando sent√≠s ansiedad. El reto es practicarla dos veces hoy, durante 3 a 5 minutos cada vez. Busc√° un lugar tranquilo, sentate con la espalda recta y prob√° este ritmo: inhal√° en 4 tiempos, sosten√© el aire 4 tiempos, y exhal√° en 6 tiempos. Hacelo lentamente. Despu√©s, registr√° c√≥mo te sent√≠s antes y despu√©s de la pr√°ctica."
    ]
}

usuarios_estado = {}

RESPUESTAS_SI = ["s√≠", "si", "s√≠.", "si.", "claro", "exacto", "eso"]
RESPUESTAS_NO = ["no", "no.", "nop", "negativo"]
SALUDOS_INICIALES = ["hola", "buenas", "buenos d√≠as", "buenas tardes", "buenas noches"]

def procesar_mensaje(mensaje, user_id):
    texto = mensaje.strip().lower()
    estado = usuarios_estado.get(user_id, {})

    if any(s in texto for s in SALUDOS_INICIALES) and "fase" not in estado:
        estado["fase"] = "introduccion"
        usuarios_estado[user_id] = estado
        return (
            "¬°Hola! Estoy aqu√≠ para acompa√±arte a desarrollar habilidades que te ayuden a afrontar lo que est√°s viviendo. "
            "Antes de seguir, te cuento c√≥mo vamos a trabajar juntas/os:\n\n"
            "1. Vamos a *identificar* lo que est√°s sintiendo\n"
            "2. Vamos a *nombrarlo* con claridad\n"
            "3. Vamos a *entender* de d√≥nde viene\n"
            "4. Y despu√©s, te propongo un *plan pr√°ctico* para enfrentarlo\n\n"
            "¬øTe gustar√≠a comenzar cont√°ndome qu√© te est√° preocupando o afectando √∫ltimamente?"
        )

    if "fase" not in estado:
        estado["fase"] = "esperando_descripcion"
        usuarios_estado[user_id] = estado

    if estado["fase"] == "esperando_descripcion":
        estado["mensaje_usuario"] = mensaje
        estado.setdefault("historial", []).append(mensaje)
        estado["fase"] = "indagacion_1"
        usuarios_estado[user_id] = estado
        return (
            "Gracias por compartirlo. Lo que est√°s viviendo suena realmente agotador y entiendo que puede hacerte sentir sobrepasada/o."
            " Vamos a seguir explorando juntas/os. ¬øQu√© es lo m√°s dif√≠cil de esa situaci√≥n para vos?"
        )

    if estado["fase"] == "indagacion_1":
        estado["indagacion_1"] = mensaje
        estado.setdefault("historial", []).append(mensaje)
        estado["fase"] = "indagacion_2"
        usuarios_estado[user_id] = estado
        return (
            "Gracias por contarme eso. Me da la impresi√≥n de que est√°s enfrentando una presi√≥n constante y eso puede ser muy dif√≠cil de sostener."
            " ¬øY en esos momentos, not√°s alguna sensaci√≥n f√≠sica o pensamientos que se repitan?"
        )

    if estado["fase"] == "indagacion_2":
        estado["indagacion_2"] = mensaje
        estado.setdefault("historial", []).append(mensaje)
        estado["fase"] = "emocion_confirmada"

        texto_total = " ".join(estado.get("historial", []))
        if "trabajo" in texto_total and "control" in texto_total:
            emocion_detectada = "frustraci√≥n"
        elif "triste" in texto_total:
            emocion_detectada = "tristeza"
        elif "ansioso" in texto_total or "ansiedad" in texto_total:
            emocion_detectada = "ansiedad"
        else:
            emocion_detectada = random.choice(list(emociones_habilidades.keys()))

        habilidad = emociones_habilidades[emocion_detectada]
        estado["emocion"] = emocion_detectada
        estado["habilidad"] = habilidad
        usuarios_estado[user_id] = estado

        return f"Gracias por compartir todo eso conmigo. Por lo que me cont√°s, podr√≠a ser que est√©s sintiendo *{emocion_detectada}*.
¬øTe hace sentido eso? Si quer√©s, podemos trabajarla desarrollando tu habilidad de *{habilidad}*.
¬øQuer√©s empezar por ah√≠? (s√≠/no)"

    if estado["fase"] == "emocion_confirmada":
        if texto in RESPUESTAS_SI:
            habilidad = estado["habilidad"]
            estado["fase"] = "plan_sugerido"
            usuarios_estado[user_id] = estado
            return planes_personalizados.get(habilidad, "Vamos a empezar con peque√±os pasos para trabajar esa habilidad. ¬øVamos?")
        elif texto in RESPUESTAS_NO:
            estado["fase"] = "reinicio"
            usuarios_estado[user_id] = estado
            return "Est√° bien, contame un poco m√°s para buscar otra forma de abordarlo."
        else:
            return "¬øQuer√©s que trabajemos esa habilidad? Respond√© s√≠ o no."

    if estado["fase"] == "plan_sugerido":
        habilidad = estado["habilidad"]
        descripcion = descripcion_habilidades.get(habilidad, "una habilidad clave")
        herramienta = retos_narrativos.get(habilidad, ["Este es tu primer reto: observ√° tus reacciones con atenci√≥n. Luego vamos a profundizar."])[0]
        estado["fase"] = "primer_reto"
        usuarios_estado[user_id] = estado
        return (
            f"Entonces el primer objetivo ser√° ayudarte a fortalecer tu *{habilidad}*, que es {descripcion}.\n\n"
            "Para lograrlo, vamos a armar un plan de peque√±os retos diarios. Yo puedo enviarte recordatorios todos los d√≠as para ver c√≥mo te fue y ayudarte a ajustar lo que sigue.\n\n"
            f"{herramienta}"
        )

    if estado["fase"] == "primer_reto":
        return "Si quer√©s avanzar o revisar algo m√°s, contame una nueva situaci√≥n."

    if estado["fase"] == "reinicio":
        estado["fase"] = "esperando_descripcion"
        usuarios_estado[user_id] = estado
        return "Volvamos al inicio. Contame qu√© te est√° preocupando."

    return "Estoy procesando lo que me compartiste. Gracias por tu paciencia."

def handle_message(update, context):
    texto = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    respuesta = procesar_mensaje(texto, user_id)
    context.bot.send_message(chat_id=chat_id, text=respuesta, parse_mode=telegram.ParseMode.MARKDOWN)

@app.route(f"/{TELEGRAM_TOKEN}", methods=['POST'])
def webhook():
    update = telegram.Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return 'ok'

@app.route('/')
def index():
    return 'MME est√° corriendo. üéâ'

if __name__ == '__main__':
    from telegram.ext import Updater
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    PORT = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=PORT)
