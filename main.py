import os
from flask import Flask, request
import telegram
from telegram.ext import Dispatcher, MessageHandler, Filters
import random
from datetime import datetime, timedelta

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
BOT_USERNAME = "@MME_SE_bot"

app = Flask(__name__)
bot = telegram.Bot(token=TELEGRAM_TOKEN)

emociones_habilidades = {
    "abandono": "confianza",
    "rechazo": "autoconciencia",
    "verg√ºenza": "confianza",
    "culpa": "toma de decisiones responsable",
    "impotencia": "autorregulaci√≥n",
    "miedo": "autorregulaci√≥n",
    "celos": "autoconciencia",
    "desesperanza": "confianza",
    "aburrimiento": "autoconciencia",
    "confusi√≥n": "toma de decisiones responsable",
    "preocupaci√≥n": "autorregulaci√≥n",
    "soledad": "conciencia social",
    "enojo": "toma de decisiones responsable",
    "frustraci√≥n": "autorregulaci√≥n",
    "ansiedad": "autorregulaci√≥n",
    "tristeza": "autoconciencia",
    "inseguridad": "confianza"
}

descripcion_habilidades = {
    "autorregulaci√≥n": "la capacidad de manejar emociones intensas como el enojo, la frustraci√≥n o el miedo, sin dejar que tomen el control",
    "autoconciencia": "la habilidad de identificar lo que sent√≠s, ponerle nombre y entender de d√≥nde viene",
    "toma de decisiones responsable": "la capacidad de evaluar opciones y actuar de forma √©tica, segura y coherente con tus valores",
    "conciencia social": "la habilidad de comprender y respetar las emociones y necesidades de los dem√°s",
    "confianza": "la seguridad interna de que ten√©s valor, incluso cuando las cosas no salen como esperabas"
}

usuarios_estado = {}

RESPUESTAS_SI = ["s√≠", "si", "s√≠.", "si.", "claro", "exacto", "eso"]
RESPUESTAS_NO = ["no", "no.", "nop", "negativo"]
SALUDOS_INICIALES = ["hola", "buenas", "buenos d√≠as", "buenas tardes", "buenas noches"]

retos_narrativos = {
    "autorregulaci√≥n": [
        "Hoy vamos a enfocarnos en una t√©cnica de respiraci√≥n consciente. La respiraci√≥n diafragm√°tica es una herramienta poderosa para ayudar a tu cuerpo a salir del estado de alerta cuando sent√≠s ansiedad. El reto es practicarla dos veces hoy, durante 3 a 5 minutos cada vez. Busc√° un lugar tranquilo, sentate con la espalda recta y prob√° este ritmo: inhal√° en 4 tiempos, sosten√© el aire 4 tiempos, y exhal√° en 6 tiempos. Despu√©s, registr√° c√≥mo te sent√≠s antes y despu√©s de la pr√°ctica."
    ],
    "autoconciencia": [
        "Hoy vas a escribir en un diario emocional sobre una situaci√≥n reciente que te hizo sentir inc√≥modo o confundido. Anot√° qu√© pas√≥, c√≥mo reaccionaste y qu√© emociones identific√°s en ese momento. Esta pr√°ctica de registro ayuda a mejorar la autoconciencia emocional."
    ],
    "toma de decisiones responsable": [
        "El reto de hoy es una simulaci√≥n de decisiones. Escrib√≠ una situaci√≥n imaginaria donde tengas que decidir entre lo correcto y lo f√°cil. Describ√≠ tus opciones, pens√° en las consecuencias de cada una y luego eleg√≠ conscientemente."
    ],
    "conciencia social": [
        "Observ√° una conversaci√≥n o interacci√≥n (presencial o virtual) y trat√° de ponerte en el lugar de la otra persona: ¬øQu√© pudo haber estado sintiendo? ¬øQu√© necesidad emocional podr√≠a haber detr√°s de su comportamiento? Anot√° tu reflexi√≥n."
    ],
    "confianza": [
        "Anot√° tres momentos de tu vida donde lograste algo importante. Luego escrib√≠ qu√© habilidades o fortalezas usaste para lograrlo."
    ]
}

def procesar_mensaje(mensaje, user_id):
    texto = mensaje.strip().lower()
    estado = usuarios_estado.get(user_id, {})

    if any(s in texto for s in SALUDOS_INICIALES):
        estado = {}
        estado["fase"] = "esperando_descripcion"
        usuarios_estado[user_id] = estado
        return (
            """¬°Hola! Gracias por estar ac√°. Me alegra que hayas llegado. Este es un espacio pensado para ayudarte a desarrollar habilidades sociales y emocionales que te permitan afrontar los desaf√≠os de la vida con m√°s claridad y bienestar.

Antes de comenzar, quiero aclararte algo importante: esto no es terapia, ni busca reemplazarla. Lo que vas a encontrar ac√° son herramientas pr√°cticas y basadas en evidencia cient√≠fica ‚Äî desde la psicolog√≠a cognitivo-conductual y el enfoque de CASEL ‚Äî para ayudarte a vivir mejor.

1. Vamos a *identificar* lo que est√°s sintiendo
2. Vamos a *nombrarlo* con claridad
3. Vamos a *entender* de d√≥nde viene
4. Y despu√©s, te propongo un *plan pr√°ctico* para enfrentarlo

¬øTe gustar√≠a comenzar cont√°ndome qu√© te est√° preocupando o afectando √∫ltimamente?"""
        )

    if estado.get("fase") == "esperando_descripcion":
        estado["mensaje_usuario"] = mensaje
        estado.setdefault("historial", []).append(mensaje)
        estado["fase"] = "indagacion_1"
        usuarios_estado[user_id] = estado
        return "Gracias por compartirlo. ¬øQu√© es lo m√°s dif√≠cil de esta situaci√≥n para vos?"

    if estado.get("fase") == "indagacion_1":
        estado["indagacion_1"] = mensaje
        estado.setdefault("historial", []).append(mensaje)
        estado["fase"] = "indagacion_2"
        usuarios_estado[user_id] = estado
        return "¬øY c√≥mo reacciona tu cuerpo o tu mente cuando est√°s en esa situaci√≥n?"

    if estado.get("fase") == "indagacion_2":
        estado["indagacion_2"] = mensaje
        estado.setdefault("historial", []).append(mensaje)
        texto_total = " ".join(estado.get("historial", []))
        emocion_detectada = "tristeza"
        for emocion in emociones_habilidades:
            if emocion in texto_total:
                emocion_detectada = emocion
                break
        habilidad = emociones_habilidades[emocion_detectada]
        descripcion = descripcion_habilidades.get(habilidad, "una habilidad clave para tu bienestar emocional")
        estado["fase"] = "emocion_confirmada"
        estado["emocion"] = emocion_detectada
        estado["habilidad"] = habilidad
        usuarios_estado[user_id] = estado
        return (
            f"Por lo que me cont√°s, podr√≠as estar sintiendo *{emocion_detectada}*. Esta emoci√≥n suele aparecer en momentos de desaf√≠o o cambio.\n"
            f"Podemos trabajarla desarrollando tu habilidad de *{habilidad}*, que es {descripcion}.\n"
            "¬øTe hace sentido esto? ¬øQuer√©s trabajar en esa habilidad? (s√≠/no)"
        )

    if estado.get("fase") == "emocion_confirmada":
        if texto in RESPUESTAS_SI:
            habilidad = estado["habilidad"]
            reto = retos_narrativos.get(habilidad, ["Vamos a empezar con peque√±os pasos."])[0]
            estado["fase"] = "reto_entregado"
            usuarios_estado[user_id] = estado
            return (
                f"Perfecto. Vamos a comenzar a trabajar en *{habilidad}*.\n\n"
                f"Tu primer reto es el siguiente:\n\n{reto}\n\n¬øQuer√©s que ma√±ana te recuerde c√≥mo te fue con este reto?"
            )
        elif texto in RESPUESTAS_NO:
            estado["fase"] = "esperando_descripcion"
            usuarios_estado[user_id] = estado
            return "Est√° bien. Podemos explorar otra emoci√≥n o situaci√≥n si quer√©s. Contame m√°s."
        else:
            return "¬øQuer√©s que trabajemos esa habilidad? Respond√© s√≠ o no."

    return "Estoy procesando lo que me compartiste. Gracias por tu paciencia."

def handle_message(update, context):
    texto = update.message.text
    user_id = update.message.from_user.id
    chat_id = update.message.chat_id
    respuesta = procesar_mensaje(texto, user_id)
    context.bot.send_message(chat_id=chat_id, text=respuesta, parse_mode=telegram.ParseMode.MARKDOWN)

@app.route(f"/{TELEGRAM_TOKEN}", methods=['POST'])
def webhook():
    update = telegram.Update.de_json(request.get_json(force=True), bot)
    dispatcher.process_update(update)
    return 'ok'

@app.route('/')
def index():
    return 'MME est√° corriendo. üéâ'

if __name__ == '__main__':
    from telegram.ext import Updater
    updater = Updater(token=TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher
    dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
    PORT = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=PORT)
